Maintaining Ad-Hoc Communication Network in
Area Protection Scenarios with Adversarial Agents
1st Marika Ivanova?
Department of Informatics
University of Bergen
HIB - Thormhlensgt. 55, 5020 Bergen, Norway
marika.ivanova@uib.no
2nd Pavel Surynek 3rd Diep Thi Ngoc Nguyen
Artificial Intelligence Research Center
National Institute of Advanced
Industrial Science and Technology (AIST)
2-3-26, Aomi, Koto-ku, Tokyo 135-0064, Japan
pavel.surynek@aist.go.jp, diep.nguyen@aist.go.jp
Abstract—We address a problem of area protection in graph-
based scenarios with multiple mobile agents where connectivity
is maintained among agents to ensure they can communicate.
The problem consists of two adversarial teams of agents that
move in an undirected graph shared by both teams. Agents are
placed in vertices of the graph; at most one agent can occupy
a vertex; and they can move into adjacent vertices in a conflict
free way. Teams have asymmetric goals: the aim of one team
- attackers - is to invade into given area while the aim of the
opponent team - defenders - is to protect the area from being
entered by attackers by occupying selected vertices. The team of
defenders need to maintain connectivity of vertices occupied by
its own agents in a visibility graph. The visibility graph models
possibility of communication between pairs of vertices.
We study strategies for allocating vertices to be occupied by the
team of defenders to block attacking agents where connectivity
is maintained at the same time. To do this we reserve a subset of
defending agents that do not try to block the attackers but instead
are placed to support connectivity of the team. The performance
of strategies is tested in multiple benchmarks. The success of a
strategy is heavily dependent on the type of the instance, and so
one of the contributions of this work is that we identify suitable
strategies for diverse instance types.
Index Terms—graph-based path-finding, area protection, area
invasion, connectivity maintenance, visibility graph, asymmetric
goals, mobile agents, agent navigation, defensive strategies, ad-
versarial planning
I. INTRODUCTION
In this work we study a generalization of Area Protection
Fig. 1: An example showing Kilobots [1] - small mobile robots
communicating through blinking LEDs and IR sensors
Problem (APP) with connectivity maintenance (APPC). In
addition to APP, where two teams of mobile agents move in
an undirected graph in a conflict free way, connectivity of the
set of occupied vertices with respect to a visibility graph is
required in APPC. The visibility graph is derived from the
graph in which agents move; it has the same set of vertices,
but the set of edges is different in general.
APP itself can be regarded as a modification of known
problem of Adversarial Cooperative Path Finding (ACPF) [2]
where two teams of agents compete in reaching their target
positions. Unlike ACPF, where the goals of teams of agents
are symmetric - agents of each team try to reach their targets
as first, the adversarial teams in APP have different objectives.
The first team of attackers contains agents whose goal is to
reach a pre-defined target location in the area being protected
by the second team of defenders. Each attacker has a unique
target in the protected area and each target is assigned to
exactly one attacker. The opponent team of defenders tries to
prevent the attackers from reaching their targets by occupying
selected locations so that they cannot be passed by attackers.
Specially in APPC, we require that vertices occupied by the
defender team always form a connected subgraph with respect
to the visibility graph.
The common feature of APP and APPC is that once a
location is occupied by an agent it cannot be entered by
another agent until it is first vacated by the agent which
occupies it (opposing agent cannot push it out). This property
represents a key tool for the defenders to protect the area.
APPC has many real-life motivations from the domains of
access denial operations, robotics with adversarial teams of
robots or other type of penetrators [3], and computer games.
In most practical applications, agents of given team need
to communicate with each other while individual robots can
communicate at short visual range only as it has been already
done in contemporary multi-robot systems (see Figure 1).
Hence it needs to be ensured that the communication reaches
every agent of the team. Such property can be modeled as
connectivity over the visibility graph whose edges represent
possibility of communication between pairs of vertices.
Our contribution consists in suggesting several on-line solv-
ing strategies for defenders that allocate suitable vertices to be
occupied so that attacker agents cannot pass into the protected
area and connectivity in the defender team is maintained. We
identified suitable vertex allocation strategies for diverse types
of APPC instances and tested them experimentally.
ar
X
iv
:1
70
9.
01
07
0v
1 
 [
cs
.M
A
] 
 4
 S
ep
 2
01
7
A. Related Work
APPC, APP, as well as ACPF share the way how movement
of agents is treated with the basic variant of cooperative path-
finding problem - CPF (multi-agent path-finding - MAPF) [4]–
[6]. In CPF the task is to plan movement of agents so that
each agent reaches its unique target in a conflict free manner.
Movements of agents in APPC at the low reactive level are
assumed to be planned by some CPF algorithm where agents
of own team cooperate while opposing agents are considered
as obstacles.
There exist multiple CPF algorithms both complete and
incomplete as well as optimal and sub-optimal under various
objective functions. A good compromise between quality of
solutions and the speed of solving is represented by sub-
optimal/incomplete search based methods which are derived
from the standard A* algorithm. These methods include LRA*,
CA*, HCA*, and WHCA* [4]. They provide solutions where
individual paths of agents tend to be close to respective
shortest paths connecting agents’ locations and their targets.
Conflict avoidance among agents is implemented via a so
called reservation table in case of CA*, HCA*, and WHCA*
while LRA* relies on replanning whenever a conflict occurs.
Since our setting in APPC is inherently suitable for a re-
planning algorithm, LRA* is a candidate for underlying CPF
algorithm for APPC. Moreover LRA* is scalable for large
number of agents which is expected to happen in APPC.
Aside from CPF algorithms, systems with mobile agents
that act in the adversarial manner represent another related
area. These studies often focus on patroling strategies that
are robust with respect to various attackers trying to penetrate
through the patrol path [7]. Theoretical works related to APP
also include studies on pursuit evasion [8] or predator-prey [9]
problems. The major difference between these works and the
concept of APP/APPC is that we consider relatively higher
number of agents and our agents are more limited in their
abilities.
B. Task Decomposition in APPC
As APPC represents generalization of APP which itself is
computationally hard problem [10] (namely PSPACE-hard),
we suggest to decompose APPC from the defender’s perspec-
tive into two different sub-problems: target allocation and
communication maintenance.
1) Target Allocation Problem: This is the major subprob-
lem being addressed in APP. The defenders are initially not
assigned to any targets and don’t have any information about
the intended target of any attacker. However, the defenders
have a full knowledge of all target locations in the protected
area. The task in this setting is to allocate each defender
agent to some location in the graph so that via its occupation
defenders try to optimize a given objective function.
We assume that both teams use the same cooperative path-
finding (CPF) algorithm for reaching temporarily selected
targets. Generally, targets can be reassigned multiple times
to defender agents in the course of area protection. However,
it is assumed that target reassignment does not occur often.
After assigning defender agents their target locations they will
proceed to their targets via given CPF algorithm. If a target
location is reached by a defender agent the agent stops there
and continue in occupation of the target location until a new
target is assigned to the agent. Attacker agents have their fixed
targets in the protected area however they are free to select
any temporary target which allows them to move freely in
principle.
2) Communication Maintenance: APPC requires, in ad-
dition to APP, that any two defenders are able to commu-
nicate with each other at any time during their movement.
In various practical applications of APP, the possibility of
sending messages among the agents is often demanded. Agents
may be equipped by an omnidirectional antenna or visual
communication device (such as LEDs and IR sensors [1]), and
hence a message reaches all nodes within the communication
range of its sender. This feature is often referred to as wireless
advantage [11]. We assume that the agents have equal and
constant communication range, and that they can also work as
transceivers, which means that they have the ability to both
transmit and receive a signal.
C. Contribution
Our effort is to design target allocation strategies for the
defending team. A hard constraint that can never be violated
will be that defending agents always form a connected compo-
nent. Success of the strategy will measured from the defenders’
perspective via an objective function which plays a role of soft
constraint (area protection may not be perfect). The following
objective functions can be pursued:
1) maximize the number of target locations that are not
captured by the corresponding attacker
2) maximize the number of target locations that are not
captured by the corresponding attacker within a given
time limit
3) maximize the sum of distances between the attackers
and their corresponding targets
4) minimize the time spent at captured targets
II. DEFINITIONS AND ASSUMPTIONS
In APP, we model the environment by an undirected un-
weighted graph G = (V,E). In this work we restrict the in-
stances to 4-connected grid graphs with possible obstacles. The
team of attackers and defenders is denoted by A= {a1, . . . ,am}
and D = {d1, . . .dn}, respectively. Continuous time is divided
into discrete time steps. At each time step agents are placed in
vertices of the graph so that at most one agent is placed in each
vertex. Let ?t : A?D? V be a uniquely invertible mapping
denoting configuration of agents at time step t. Agents can
wait or move instantaneously into adjacent vertex between
successive time steps to form the next configuration ?t+1.
Abiding by the following movement rules ensures preventing
conflicts:
• An agent can move to an adjacent vertex only if the vertex
is empty, or is being left at the same time step by another
agent
• No two agents enter the same adjacent vertex at the same
time
• A pair of agents cannot swap across an edge
We do not assume any specific order in which agents per-
form their conflict free actions at each time step. However, our
experimental implementation moves all attacking agents prior
to moving all defender agents at each time step. The mapping
?A : A?V assigns a unique target to each attacker. The task in
APP is to move defender agents so that area specified by ?A is
protected. This task can be equivalently specified as a search
for strategy of target assignments for the defender team. That
is, we are trying to find an injective mapping ?Dt : D?V which
specifies where defender agents should proceed via given path-
finding algorithm at time step t as a response to previous
attackers movements. The superscripts A and D is sometimes
dropped when there is no danger of confusion. Let us note
that target reassignment can be done at each time step which
is equivalent to full control of movements of defender agents
at each time step.
Formally, we state the APP as a decision problem and an
optimization problem as follows:
Definition 1. The decision APP problem: Given an instance
? = (G,A,D,?0,?A) of APP, is there a strategy of target
allocations ?Dt : D? V such that the team D of defenders is
able to prevent agents from the team of attackers from reaching
their targets by moving defending agents towards ?Dt .
In many instances it is not possible to protect all targets.
We are therefore also interested in the optimization variant of
the APP problem:
Definition 2. The optimization problem Given an instance ?=
(G,A,D,?0,?A) of APP, the task is to find a strategy of target
allocations ?Dt : D? V such that the team D of defenders
minimizes the number of attackers that reach their target by
moving defending agents towards ?Dt .
A. From APP to APPC
APPC generalizes APP by considering connectivity con-
straint. As we assume that G is always a grid graph we can
introduce connectivity constraint in the following way.
Consider an embedding of G in a plane such that all edges
have length 1 and each vertex v ?V has coordinates (xv,yv).
The physical location lv represented by v is the unit square
area centered at Cv = (xv,yv). Furthermore, let O denote the
set of square locations representing obstacles.
Let r be the visibility range, i.e. the maximum distance
between two locations such that two agents located at them can
communicate together. The locations lu and lv can communi-
cate with each other if the line segment CuCv does not intersect
any obstacle and the length of the shortest path puv from u to v
is at most r; shortly we say that lu is visible from lv and vice-
versa. The visibility graph Gr = (V,Er) for a visibility range
r contains edges between every two vertices that are mutually
visible, formally: (u,v) ? Er ?CuCv ?O = /0? |puv| ? r. For
any S?V we use Gr [S] in order to denote a subgraph of Gr
induced by S.
III. TARGET ALLOCATION
Since solving APP in practice is a challenging problem due
to its high computational complexity, designed methods are
inexact and heuristic. Solving approaches can be divided into
two basic categories: single-stage and multi-stage. In single
stage methods, targets are assigned to defenders only once
at the beginning, as opposed to multi-stage methods, where
the targets can be reassigned any time during the agents’
course. Once all defenders are allocated to some targets, they
try to get to the desired locations using the LRA* algorithm
modified for the environment with adversarial team. This work
focuses merely on the single-stage methods. In all the studied
strategies, every agent is allocated to exactly one location
and every location is assigned to at most one defender. We
describe several simple target allocation strategies and discuss
their properties.
A. Random Allocation
For the sake of comparison, we consider a strategy, where
each defender is allocated to a random target of an attacker.
Neither the agent location nor the underlying grid graph
structure is exploited.
B. Greedy Allocation
A greedy strategy is slightly improved approach. It takes the
defenders one by one in a random order and allocates them to
their closest target. Greedy as well as Random strategy do not
consider initial locations of attackers and do not exploit the
structure of underlying graph in any way. These two methods
always allocate defenders to given targets of attackers. The
advantage of this approach is that if a defender manages to
reach its assigned target, it will never be captured by the
attacker aiming for that target. This can be useful in scenarios
where the number of defenders is similar to the number of
attackers. Unfortunately, such a strategy would not be very
successful in instances where attackers significantly outnumber
defenders.
C. Bottleneck Simulation Allocation
The idea behing the bottleneck simulation strategy is to gain
some information from the map structure and the positions of
attackers and assign defenders to vertices that would divert
attackers from the protected area as much as possible. The
aim is to successfully defend the targets even with a small
number of defenders, as illustrated in Fig. 2.
We attempt to identify strategic bottlenecks and block them
by defenders. In order to discover bottlenecks of general shape,
we develop the following simulation strategy exploiting the
underlying grid graph. The basic idea is that as attackers move
towards the targets, they are expected to pass through vertices
close to a bottleneck more often than other vertices. This
observation suggests to simulate the movement of the attackers
and find frequently visited vertices. As defenders do not
share the knowledge about paths being followed by attackers,
frequently visited vertices are determined by a simulation in
which paths of attackers are estimated.
Fig. 2: An example of bottleneck blocking. The defenders
(green circles) may protect all the targets (empty red circles)
from attackers (red circles) if they move to locations marked
by the two arrows.
After obtaining such a frequently visited vertex, we then
explore its vicinity up to a given distance. If we find out that
there is indeed a bottleneck, its vertices are assigned to some
defenders as their new targets. Under the assumption that the
bottleneck is blocked by defenders, the paths of attackers may
substantially change. For that reason we estimate the paths
again and find the next frequent vertex of which vicinity is
searched for bottlenecks. The whole process is repeated until
all available defenders are allocated to a target, or until no
more bottlenecks are found. Alg. 1 describes this procedure
more formally.
IV. CONNECTIVITY MAINTENANCE
The requirement of maintaining the possibility of com-
munication is modeled by a connectivity maintenance of
subgraph of the visibility graph induced by the defenders’
locations. The first task is therefore to create the visibility
graph, which depends on the positions of obstacles in the
map and a predetermined visibility range. The agents move
using an adaptation of the LRA* algorithm that preserves the
connectivity of the visibility graph. Paths are planned such
that the first step of a defender must lead to a position which
induces a connected visibility graph. Defenders follow paths
computed by LRA* and whenever an agent is about to enter
an occupied location, or if the next move would disconnect
the communication subgraph, its path is recalculated.
The movement determined by such an approach will surely
maintain the connectivity, however, in many instances, some
defenders will not be able to reach the target locations assigned
to them. Our effort is to modify the allocation strategies so
that the number of defenders that are not able to reach their
assigned targets is minimized.
An intuitive idea assumes that defenders should be allocated
to their targets so that in the most optimistic case, when
they all reach their targets, the connectivity is preserved. This
constraint is not guaranteed to be satisfied in a general case.
We propose the following approach to tackle this issue.
Initially, the defenders are partitioned into two sub-sets,
communicators Dc and occupiers Do, with a selected ratio
|Dc| : |Do|. The occupiers are allocated to targets according
to one of the allocation strategies described in the previous
subsections. In the best scenario, all defenders manage to
reach their targets. It is easy to check, for example by using
Data: G = (V,E), D, A
Result: Target allocation ?D
Davailable = D; // Defenders to be allocated to targets
F = /0 ; // Set of forbidden locations
??A = Random guess of ?A;
while Davailable 6= /0 do
for a ? A do
/* find the shortest path in G between an
attacker a and its estimated target, that
avoids passing through the forbidden locations
in F */
pa = shortestPath(?0(a),??A(a),G,F);
end
f (v) = |{pa : a ? A? v ? pa}|; // Frequency of v
w ? argmaxv?V f (v);
B = exploreVicinity(w); // Search for a bottleneck
if B 6= /0 then
D? ? Davailable, |D?|= |B|;
assignToDefenders(B, D’);
Davailable = Davailable \D?;
F = F ?B
else
/* If no new bottleneck is found, assume all have
been already discovered */
break ;
end
end
/* If there are some defenders without a target left, they
will be allocated randomly */
assignToRandomTargets(Davailable);
Algorithm 1: Bottleneck simulation proceudre
BFS or DFS on the induced subgraph, whether the ideal final
position of defenders maintains connectivity. If the connec-
tivity is violated, the defenders reserved as communicators
are allocated to targets so that the subgraph of the visibility
graph induced by the defenders’ target locations has as few
connected components as possible. Fig. 3 depicts a situation
where the three occupiers reached the attackers’ targets as-
signed to them, but they alone are not able to communicate.
Nevertheless, a suitable placement of two communicators
ensures that the communication can take place. In fact, the
question whether it is possible to allocate targets for Dc so
that the desired position allows a communication among all
defenders is already difficult.
Proposition 1. Let ? be an APPC instance with the set of
defenders D = Dc ?Do. The decision problem whether there
exists a target allocation ?D2 : D2?V of targets to defenders
such that all defenders maintain connectivity at their final
positions is NP-complete.
Sketch of proof. The problem is obviously NP, because check-
ing a connectivity can be done in polynomial time. In order to
prove the NP-hardness, we reduce the NP-complete problem
Fig. 3: Three occupiers managed to reach the targets, but due
to the wall they are not able to communicate. The presence
of two communicators enables the communication via links
marked by the dashed lines.
of Vertex Cover (VC) to our problem. Let H = (VH ,EH) be an
instance of VC. For each e? EH we create ve ?V such that Ve
is a target of some a? A. For each u?VH we construct vu ?V
such that for all e? EH incident with u we create {vu,ve} ? E.
Vertices vu s. t. u?VH form a complete subgraph of G. Finally,
set |Dc|= k. Now H has a vertex cover of size at most k if and
only if it is possible to maintain connectivity of the desired
position in ?.
Let To and Tc be the set of targets allocated to occupiers and
communicators, respectively. If the induced subgraph Gr [To]
has several connected components, the used modification of
LRA* algorithm could not lead all of them to their targets,
because it would cause a loss of communication ability. At
this point the set of communicators comes into play. The aim
is to find target locations for communicators so that the graph
Gr [To?Tr] is connected. First, the connected components of
Gr [To]. are identified. We then iterate while there are available
communicators and connected components to be covered by
them. In every iteration, a location l from which a communi-
cator can cover a set of connected components that contains
maximum number of targets allocated to occupiers is selected
together with the set of covered connected components. The
location l is subsequently assigned to the closest unallocated
communicator. For a more formal explanation see Alg. 2.
V. PRELIMINARY EXPERIMENTS
The aim of experimental evaluation is to compare individual
strategies described in the previous section with their counter-
parts adapted to connectivity maintenance. We would like to
find out whether the adaptation improves the success rate of
a strategy and also how instance types affect its performance.
Our hypothesis is that when there is a sufficient number of
defenders, the adaptation has little or no effect. We predict that
in instances, where defenders are outnumbered by attackers,
the adaptation increases the success rate of the corresponding
strategy. Furthermore, it is likely that the simulation strategy is
worse when the connectivity maintenance is required, because
the identified bottlenecks may be far from each other, which
makes it difficult to preserve communication among them.
We implemented all suggested strategies in Java as an
experimental prototype. In our testing scenarios we use maps
of different structure with various initial configurations of
attackers and defenders. Our choice of testing scenarios is
Data: Gr = (V,Er), Do, Dc, To
Result: Target allocation ?Dc
Tc = /0; // Targets assigned to communicators
while Dc 6= /0 do
C = connected components of Gr [To?Tc];
while C 6= /0 do
/* A pair of a locatoin l and a subset C? of
connected components covered by l that
minimizes the number of vertices in C? */
(l,C?) = arg max
C??C,l?V
{ ?
C?C?
|C| : ?v ?C : (v, l) ? Er};
/* An available agent closest to l */
a = argmina?Dc{|p?0(a),l |};
assign the target l to the agent a;
Tc = Tc?{l};
C= C\C?;
Dc = Dc \{a};
if Dc = /0 then
break ;
end
end
end
Algorithm 2: Target allocation to communicators
focused on comparing performance of the strategies and
discovering what factors have impact on their success.
As the following sections show, different strategies are suc-
cessful in different types of instances. It is therefore important
to design the instances with a sufficient diversity, in order to
capture strengths and weaknesses of individual strategies.
A. Instance generation and types
The instances used in the practical experiments are gener-
ated using a pseudo random generator, but in a controlled man-
ner. An instance is defined by its map, the ratio |A| : |D| and
locations of individual defenders, attackers and their targets.
These three entries form an input of the instance generation
procedure. Further, we select rectangular areas inside which
agents of both teams and the attackers’ targets are placed
randomly. The experiments are conducted on 3 different maps
that vary in their structure. The maps are depicted in Fig. 4.
(a) Orthogonal rooms (b) Ruins (c) Waterfront
Fig. 4: Three different maps used in the evaluation
Each map is populated with agents of 3 different |D| : |A|
ratios, namely 1 : 1, 1 : 2 and and 1 : 5, with fixed number
of attackers |A|= 50. The maximum number of moves of the
agents is set to 150 for each team. Note that the individual
instances are never completely fair to both teams. It is there-
fore impossible to make a conclusion about a success rate of
a strategy by comparing its performance on different maps.
The comparison should always be made by inspecting the
performance in one type of instance, where we can see the
relative strength of the studied algorithms.
B. Experimental results
The following set of experiments compares random, greedy,
simulation strategy and their communication counterparts in
different instance settings. Each of the following tables con-
tains results for one map.
Each entry in following tables shows an average number of
attackers that reached their targets at the end of the time limit.
The average value is calculated for 10 runs in each settings,
always with a different random seed. Random and greedy
strategies have very similar results in all positions and team
ratios. It is apparent and not surprising that with decreasing
|D| : |A| ratio, the strength of defensive strategies decreases.
TABLE I: Average number of agents that eventually reached
their target in the map Orthogonal rooms
Strategies
|D| : |A| RND RND-C GRD GRD-C SIM SIM-C
1:1 26.0 29.0 25.5 29.1 20.8 28.3
1:2 41.0 39.6 39.4 40.5 29.3 31.7
1:5 48.1 45.7 46.1 46.8 46.9 46.8
We focused on evaluation of the effect of using communi-
cating agents in implemented target allocation strategies. For
each target allocation strategy we compare the standard version
and the version with communicating agents.
Tab. I shows results for Orthogonal rooms map. It can
be observed that using communicators is beneficial in case
of random strategy where defenders tend to be outnumbered
by attackers. On the other hand, communicators cause no
improvement in Ruins map (Tab. II). Small improvement of the
TABLE II: Average number of agents that eventually reached
their target in the map Ruins.
Strategies
|D| : |A| RND RND-C GRD GRD-C SIM SIM-C
1:1 21.5 21.1 24.8 24.7 18.3 18.6
1:2 42.1 40.2 39.0 40.3 37.1 36.9
1:5 47.1 47.1 46.0 46.2 44.3 43.8
bottleneck simulation strategy can be observed in Waterfront
map (Tab. III) again in cases when defenders are outnumbered.
Both types of maps where communicators turned out to be
beneficial appear to have the structure of large open spaces
separated by narrow bottlenecks.
CONCLUSION AND FUTURE WORK
We have designed several practical algorithms for APPC.
We extended previous algorithms for APP with a technique of
connectivity maintenance. This is done by dividing defending
TABLE III: Average number of agents that eventually reached
their target in the map Waterfront
Strategies
|D| : |A| RND RND-C GRD GRD-C SIM SIM-C
1:1 20.7 21.6 18.9 18.5 20.8 21.9
1:2 35.2 31.2 30.7 31.4 35.8 33.5
1:5 41.6 41.4 40.7 40.7 42.3 41.3
agents into two groups - occupiers and communicators. The
role of occupiers is to protect the area while communicators
are placed so that they cover as largest part of the protected
area as possible in order to support connectivity among
occupiers. Performed experimental evaluation indicates that
the effect of using dedicated agents as communicators is much
smaller than expected but there is some in maps having the
structure of large open spaces separated by bottlenecks. One
possible explanation of this behavior is that several defenders
are not able to reach their targets because the ability of
communication would be lost during their movement and this
is not significantly affected by the target allocation. Hence, for
the future work we plan to design and evaluate algorithms with
more sophisticated mechanism for connectivity maintenance.
A more promising direction seems to be an adaptation of
LRA* rather than modifications of the allocation strategies.
REFERENCES
[1] M. Rubenstein, C. Ahler, N. Hoff, A. Cabrera, and R. Nagpal, “Kilobot:
A low cost robot with scalable operations designed for collective
behaviors,” Robotics and Autonomous Systems, vol. 62, no. 7, pp. 966–
975, 2014.
[2] M. Ivanova? and P. Surynek, “Adversarial cooperative path-finding:
Complexity and algorithms,” in 26th IEEE International Conference on
Tools with Artificial Intelligence, ICTAI 2014, 2014, pp. 75–82.
[3] N. Agmon, G. A. Kaminka, and S. Kraus, “Multi-robot adversarial
patrolling: Facing a full-knowledge opponent,” J. Artif. Intell. Res.,
vol. 42, pp. 887–916, 2011.
[4] D. Silver, “Cooperative pathfinding,” in Proc. of the 1st Artificial
Intelligence and Interactive Digital Entertainment Conference, 2005,
2005, pp. 117–122.
[5] M. R. K. Ryan, “Exploiting subgraph structure in multi-robot path
planning,” J. Artif. Intell. Res., vol. 31, pp. 497–542, 2008.
[6] K. C. Wang and A. Botea, “MAPP: a scalable multi-agent path planning
algorithm with tractability and completeness guarantees,” J. Artif. Intell.
Res., vol. 42, pp. 55–90, 2011.
[7] Y. Elmaliach, N. Agmon, and G. A. Kaminka, “Multi-robot area patrol
under frequency constraints,” Ann. Math. Artif. Intell., vol. 57, no. 3-4,
pp. 293–320, 2009.
[8] R. Vidal, O. Shakernia, H. J. Kim, D. H. Shim, and S. Sastry, “Proba-
bilistic pursuit-evasion games: theory, implementation, and experimental
evaluation,” IEEE Trans. Robotics and Autom., vol. 18, no. 5, pp. 662–
669, 2002.
[9] T. Haynes and S. Sen, “Evolving beharioral strategies in predators
and prey,” in Proc. of Adaption and Learning in Multi-Agent Systems,
IJCAI’95 Workshop, 1995, pp. 113–126.
[10] M. Ivanova? and P. Surynek, “Area protection in adversarial path-finding
scenarios with multiple mobile agents on graphs: a theoretical and ex-
perimental study of target-allocation strategies for defense coordination,”
Technical report, arXiv, vol. arXiv:1708.0728, 2017.
[11] J. E. Wieselthier, G. D. Nguyen, and A. Ephremides, “Energy-efficient
broadcast and multicast trees in wireless networks,” Mob. Netw. Appl.,
vol. 7, no. 6, pp. 481–492, 2002.
