Knowledge Transfer Between Artificial Intelligence
Systems
Ivan Yu. Tyukina,b,c,?, Alexander N. Gorbana,c, Konstantin I. Sofeikova,d, Ilya
Romanenkod
aUniversity of Leicester, Department of Mathematics, University Road, Leicester, LE1
7RH, UK
bDepartment of Automation and Control Processes, St. Petersburg State University of
Electrical Engineering, Prof. Popova str. 5, Saint-Petersburg, 197376, Russian Federation
cUnivAI Ltd, 5 Park Court, Pyrford Road, West Byfleet, KT14 6SD, UK
dImaging and Vision Group, ARM Ltd, 1 Summerpool Rd, Loughborough, LE11 5RD, UK
Abstract
We consider the fundamental question: how a legacy “student” Artificial Intel-
ligent (AI) system could learn from a legacy “teacher” AI system or a human
expert without complete re-training and, most importantly, without requiring
significant computational resources. Here “learning” is understood as an ability
of one system to mimic responses of the other and vice-versa. We call such
learning an Artificial Intelligence knowledge transfer. We show that if inter-
nal variables of the “student” Artificial Intelligent system have the structure of
an n-dimensional topological vector space and n is sufficiently high then, with
probability close to one, the required knowledge transfer can be implemented
by simple cascades of linear functionals. In particular, for n sufficiently large,
with probability close to one, the “student” system can successfully and non-
iteratively learn k  n new examples from the “teacher” (or correct the same
number of mistakes) at the cost of two additional inner products. The con-
cept is illustrated with an example of knowledge transfer from a pre-trained
convolutional neural network to a simple linear classifier with HOG features.
Keywords: Learning, neural networks, approximation, measure concentration
1. Introduction
Knowledge transfer between Artificial Intelligent systems has been the sub-
ject of extensive discussion in the literature for more than two decades [1], [2],
[3], [4]. State-of-the art approach to date is to use, or salvage, parts of the
?Corresponding author
Email addresses: I.Tyukin@le.ac.uk (Ivan Yu. Tyukin), ag153@le.ac.uk (Alexander
N. Gorban), sofeykov@gmail.com (Konstantin I. Sofeikov), Ilya.Romanenko@arm.com (Ilya
Romanenko)
Preprint submitted to Elsevier August 17, 2017
ar
X
iv
:1
70
9.
01
54
7v
1 
 [
cs
.A
I]
  5
 S
ep
 2
01
7
teacher AI system in the student AI followed by re-training of the student [5],
[6]. Alternatives to AI salvaging include model compression [7], knowledge dis-
tillation [8], and privileged information [9]. These approaches demonstrated
substantial success in improving generalization capabilities of AIs as well as
in reducing computational overheads [10], in cases of knowledge transfer from
larger AI to the smaller one. Notwithstanding, however, which of the above
strategies is followed, their implementation often requires either significant re-
sources including large training sets and power needed for training, or access to
privileged information that may not necessarily be available to end-users. Thus
new frameworks and approaches are needed.
In this contribution we provide new framework for automated, fast, and
non-destructive process of knowledge spreading across AI systems of varying
architectures. In this framework, knowledge transfer is accomplished by means
of Knowledge Transfer Units comprising of mere linear functionals and/or their
small cascades. Main mathematical ideas are rooted in measure concentration
[11], [12], [13], [14], [15] and stochastic separation theorems [16] revealing pe-
culiar properties of random sets in high dimensions. We generalize some of
the latter results here and show how these generalizations can be employed to
build simple one-shot Knowledge Transfer algorithms between heterogeneous AI
systems whose state may be represented by elements of linear vector space of
sufficiently high dimension. Once knowledge has been transferred from one AI
to another, the approach also allows to “unlearn” new knowledge without the
need to store a complete copy of the “student” AI is created prior to learning.
We expect that the proposed framework may pave way for fully functional new
phenomenon – Nursery of AI systems in which AIs quickly learn from each other
whilst keeping their pre-existing skills largely intact.
The paper is organized as follows. Section 2 contains mathematical back-
ground needed to justify the proposed knowledge transfer algorithms. In Section
3 we present two algorithms for transferring knowledge between a pair of AI sys-
tems in which one operates as a teacher and the other functions as a student.
Section 4 illustrates the approach with examples, and Section 5 concludes the
paper.
2. Mathematical background
Let the set
M = {x1, . . . ,xM}
be an i.i.d. sample from a distribution in Rn. Pick another set
Y = {xM+1, . . . ,xM+k}
from the same distribution at random. What is the probability that there is a
linear functional separating Y from M?
Below we provide three k-tuple separation theorems: for an equidistribution
in Bn(1) (Theorem 1 and 2) and for a product probability measure with bounded
support (Theorem 3). These two special cases cover or, indeed, approximate
2
broad range of practically relevant situations including e.g. Gaussian distribu-
tions (reduce asymptotically to equidistribution in Bn(1) for n large enough)
and data vectors in which each attribute is a numerical and independent random
variable.
Consider the case when the underlying probability distribution is an equidis-
tribution in the unit ball Bn(1), and suppose that M = {x1, . . . ,xM} and
Y = {xM+1, . . . ,xM+k} are i.i.d. samples from this distribution. We are inter-
ested in determining the probability P1(M,Y) that there exists a linear func-
tional l separatingM and Y. An estimate of this probability is provided in the
following theorem
Theorem 1. Let M = {x1, . . . ,xM} and Y = {xM+1, . . . ,xM+k} be i.i.d.
samples from the equidisribution in Bn(1). Then
P1(M,Y) ? max
?,?
(1? (1? ?)n)k
k?1?
m=1
(
1?m
(
1? ?2
)n
2
)(
1? ?(?, ?, k)
n
2
2
)M
?(?, ?, k) = 1?
[
(1? ?)
?
1? (k ? 1)?2?
k
? (k ? 1) 12 ?
]2
Subject to :
?, ? ? (0, 1)
1? (k ? 1)?2 ? 0
(k ? 1)(1? ?2)n2 ? 1
(1? ?)
?
1? (k ? 1)?2?
k
? (k ? 1) 12 ? ? 0.
(1)
Proof of Theorem 1. Given that elements in the set Y are independent, the
probability p1 that Y ? Bn(1) \Bn(1? ?) is
p1 = (1? (1? ?)n)k.
Consider an auxiliary set
Y? =
{
x?i ? Rn | x?i = (1? ?)
xM+i
?xM+i?
, i = 1, . . . , k
}
.
Vectors x?i ? Y? belong to the sphere of radius 1 ? ? centred at the origin (see
Figure 1, (b)). According to [17] (proof of Proposition 3 and estimate (26)), the
probability p2 that for a given a given ? ? (0, 1) all elements of Y? are pair-wise
?/(1? ?)-orthogonal, i.e.
|cos (x?i, x?j)?| ?
?
1? ?
for all i, j ? {1, . . . , k}, i 6= j, (2)
3
 
?
xM+1
xM+2
xM+3
(a)
 
1? ?
x1
x2
x3
^
^
^
(b)
 
h3
x?3
2? 2?
2 ?
1/2
(c)
 
h1
h2
h3
^
^
^
(d)
 
xM+1
xM+2
h 1
h2
l(x)=0
l  (x)=00
x?2
?
h
_
(e)
Figure 1: Illustration to the proof of Theorem 1. Panel (a) shows xM+1, xM+2 and xM+3 in
the set Bn(1) \Bn(1? ?). Panel (b) shows x?1, x?2, and x?3 on the sphere Sn?1(1? ?). Panel
(c): construction of h3. Note that ?h3? = ?x?3?(1 ? 2?2)1/2 = (1 ? ?)(1 ? 2?2)1/2. Panel
(d) shows simplex formed by orthogonal vectors h?1, h?2, h?3. Panel (e) illustrates derivation
of functionals l and l0.
4
can be estimated from below as:
p2 ? p1
k?1?
m=1
(
1?m
(
1? ?2
)n
2
)
= (1? (1? ?)n)k
k?1?
m=1
(
1?m
(
1? ?2
)n
2
)
.
for (k ? 1)(1? ?2)n2 ? 1. Suppose now that (2) holds true. Let ? be chosen so
that 1? (k ? 1)?2 ? 0. If this is the case than there exists a set of k pair-wise
orthogonal vectors
H = {h1,h2, . . . ,hk}, ?hi,hj? = 0, i, j ? {1, . . . , k}, i 6= j,
such that (Figure 1, (c))
?x?i?hi? ? (i?1)
1
2 ?, ?hi? = (1??)(1? (i?1)?2)
1
2 , for all i ? {1, . . . , k}. (3)
Finally, consider the set
H? =
{
h?i ? Rn | h?i = (1? ?)(1? (k ? 1)?2)
1
2
hi
?hi?
, i = 1, . . . , k
}
The set H? belongs to the sphere of radius (1? (k ? 1)?2) 12 , and its k elements
are vertices of the corresponding k ? 1-simplex in Rn (Figure 1, (d)).
Consider the functional:
l(x) =
?
h?
?h??
,x
?
?
(1? ?)
?
1? (k ? 1)?2?
k
, h? =
1
k
k?
i=1
h?i.
Recall that if e1, . . . , ek are orthonormal vectors in Rn then ?e1+e2+· · ·+ek?2 =
k. Hence
????ki=1 h?i??? = ?k(1 ? ?)?1? (k ? 1)?2, and we can conclude that
l(h?i) = 0 and l(hi) ? 0 for all i = 1, . . . , k. According to (3), ?x?i ? hi? ?
(k ? 1) 12 ? for all i = 1, . . . , k. Therefore the functional
l0(x) = l(x) + (k ? 1)
1
2 ? =
?
h?
?h??
,x
?
?
(
(1? ?)
?
1? (k ? 1)?2?
k
? (k ? 1) 12 ?
)
(4)
satisfies the following condition: l0(x?i) ? 0 and l0(xM+i) ? 0 for all i = 1, . . . , k.
This is illustrated with Figure 1, (e).
The functional l0 partitions the unit ball Bn(1) into the union of two disjoint
sets: the spherical cap C
C = {x ? Bn(1) |l0(x) ? 0} (5)
and its complement in Bn(1), Bn(1) \ C. The volume V of the cap C can be
estimated from above as
V(C) ? ?(?, ?, k)
n
2
2
,
?(?, ?, k) = 1?
[
(1? ?)
?
1? (k ? 1)?2?
k
? (k ? 1) 12 ?
]2
.
5
0 5 10 15 20
k
0
0.2
0.4
0.6
0.8
1
P
1
Figure 2: Estimate (1) of P1(M,Y) as a function of k for n = 2000 and M = 105.
Hence the probability p3 that l0(xi) < 0 for all xi ? M can be estimated from
below as
p3 ?
(
1? ?(?, ?, k)
n
2
2
)M
.
Therefore, for fixed ?, ? ? (0, 1) chosen so that (1??)
?
1?(k?1)?2?
k
? (k? 1) 12 ? ? 0,
the probability p4(?, ?) that M can be separated from Y by the functional l0
can be estimated from below as:
p4(?, ?) ? (1? (1? ?)n)k
k?1?
m=1
(
1?m
(
1? ?2
)n
2
)(
1? ?(?, ?, k)
n
2
2
)M
.
Given that this estimate holds for all feasible values of ?, ?, statement (1) follows.

Figure 2 shows how estimate (1) of the probability P1(M,Y) behaves, as
a function of |Y| for fixed M and n. As one can see from this figure, when k
exceeds some critical value (k = 9 in this specific case), the lower bound estimate
(1) of the probability P1(M,Y) drops. This is not surprising since the bound
(1) is a) based on rough, L?-like, estimates, and b) these estimates are derived
for just one class of separating functionals l0(x). Furthermore, no prior pre-
processing and/or clustering was assumed for the Y. An alternative estimate
that allows us to account for possible clustering in the set Y is presented in
Theorem 2.
Theorem 2. Let M = {x1, . . . ,xM} and Y = {xM+1, . . . ,xM+k} be i.i.d.
samples from the equidisribution in Bn(1). Let Yc = {xM+r1 , . . . ,xM+rm} be a
subset of m elements from Y such that
?2(m? 1) ?
?
rj , rj 6=ri
?xM+ri ,xM+rj ? ? ?1(m? 1) for all i = 1, . . . ,m. (6)
6
Then
P1(M,Yc) ? max
?
(1? (1? ?)n)k
(
1? ?(?,m)
n
2
2
)M
?(?,m) = 1? 1
m
(
(1? ?)2 + ?2(m? 1)?
1 + (m? 1)?1
)2
Subject to :
(1? ?)2 + ?2(m? 1) > 0
1 + (m? 1)?1 > 0.
(7)
Proof of Theorem 2. Consider the set Y. Observe that ?xMi? ? 1??, ? ? (0, 1),
for all i = 1, . . . , k, with probability p1 ? (1 ? (1 ? ?)n)k. Consider now the
vector y?
y? =
1
m
m?
i=1
xM+ri ,
and evaluate the following inner products?
y?
?y??
,xM+i
?
=
1
m?y??
???xM+ri ,xM+ri?+ ?
rj , j 6=i
?xM+ri ,xM+rj ?
?? , i = 1, . . . ,m.
According to assumption (6),?
y?
?y??
,xM+i
?
? 1
m?y??
(
(1? ?)2 + ?2(m? 1)
)
and, respectively,
1
m
(1 + (m? 1)?1) ? ?y?, y?? ?
1
m
(
(1? ?)2 + ?2(m? 1)
)
Let (1 ? ?)2 + ?2(m ? 1) > 0 and (1 ? ?)2 + ?1(m ? 1) > 0. Consider the
functional
l0(x) =
?
y?
?y??
,x
?
? 1?
m
(
(1? ?)2 + ?2(m? 1)?
1 + (m? 1)?1
)
. (8)
It is clear that l0(xM+ri) ? 0 for all i = 1, . . . ,m by the way the functional is
constructed. The functional l0(x) partitions the ball Bn(1) into two sets: the
set C defined as in (5) and its complement, Bn(1) \ C. The volume V of the set
C is bounded from above as
V(C) ? ?(?,m)
n
2
2
where
?(?,m) = 1? 1
m
(
(1? ?)2 + ?2(m? 1)?
1 + ?1(m? 1)
)2
.
7
0 10 20 30 40 50 60 70 80 90 100
k
0
0.2
0.4
0.6
0.8
1
P
1
Figure 3: Estimate (7) of P1(M,Y) as a function of k for n = 2000 and M = 105. Red stars
correspond to ?1 = 0.5, ?2 = 0. Blue triangles stand for ?1 = 0.5, ?2 = 0.05, and black circles
stand for ?1 = 0.5, ?2 = 0.07.
Estimate (7) now follows. 
Examples of estimates (7) for various parameter settings are shown in Fig.
3. As one can see, in absence of pair-wise strictly positive correlation assump-
tion, ?1 = 0, the estimate’s behavior, as a function of k, is similar to that
of (1). However, presence of moderate pair-wise positive correlation results in
significant boosts to the values of P1.
Remark 1. Estimates (1), (7) for the probability P1(M,Y) that follow from
Theorems 1, 2 assume that the underlying probability distribution is an equidis-
tribution in Bn(1). They can, however, be generalized to equidistribuions in
ellipsoids and Gaussian distributions (cf. [18]).
Note that proofs of Theorems 1, 2 are constructive. Not only they provide
estimates from below of the probability that two random i.i.d. drawn samples
from Bn(1) are linearly separable, but also they present the corresponding sep-
arating functionals explicitly as (4) and (8), respectively. The latter functionals
are similar to Fisher linear discriminants. Whilst having explicit separation
functionals is an obvious advantage from practical view point, the estimates
that are associated with such functionals do not account for more flexible alter-
natives. In what follows we present a generalization of the above results that
accounts for such a possibility as well as extends applicability of the approach
to samples from product distributions. The results are provided in Theorem 3.
Theorem 3. Consider the linear space E = span{xj ? xM+1 | j = M +
2, . . . ,M + k}, let the cardinality |Y| = k of the set Y be smaller than n.
Consider the quotient space Rn/E. Let Q(x) be a representation of x ? Rn
in Rn/E, and let the coordinates of Q(xi), i = 1, . . . ,M + 1 be independent
random variables i.i.d. sampled from a product distribution in a unit cube with
8
variances ?j > ?0 > 0, 1 ? j ? n? k + 1. Then for
M ? ?
3
exp
(
(n? k + 1)?40
2
)
? 1
with probability p > 1? ? there is a linear functional separating Y and M.
Proof of Theorem 3. Observe that, in the quotient space Rn/E, elements of the
set
Y = {xM+1,xM+1 + (xM+2 ? xM+1), . . . ,xM+1 + (xM+k ? xM+1)}
are vectors whose coordinates coincide with that of the quotient representation
of xM+1. This means that the quotient representation of Y consists of a single
element, Q(xM+1). Furthermore, dimension of Rn/E is n ? k + 1. Let R20 =?n?k+1
i=1 ?
2
i and Q?(x) = E(Q(x)). According to Theorem 2 and Corollary 2
from [16], for ? ? (0, 1) and M satisfying
M ? ?
3
exp
(
(n? k + 1)?40
2
)
? 1,
with probability p > 1? ? the following inequalities hold:
1
2
? ?Q(xj)? Q?(x)?
2
R20
? 3
2
,
?
Q(xi)? Q?(x)
R0
,
Q(xM+1)? Q?(x)
?Q(xM+1)? Q?(x)?
?
<
1?
2
for all i, j, i 6= M + 1. This implies that the functional
`0(x) =
?
Q(x)? Q?(x)
R0
,
Q(xM+1)? Q?(x)
?Q(xM+1)? Q?(x)?
?
? 1?
2
separates M and Y with probability p > 1? ?. 
3. AI Knowledge Transfer Framework
In this section we show how Theorems 1, 2 and 3 can be applied for develop-
ing a novel one-shot AI knowledge transfer framework. We will focus on the case
of transfer knowledge between two AI systems, a teacher AI and a student AI,
in which input-output behaviour of the student AI is evaluated by the teacher
AI. In this setting, assignment of AI roles, i.e. student or teaching, is beyond
the scope of this manuscript. The roles are supposed to be pre-determined or
otherwise chosen arbitrarily.
3.1. General setup
Consider two AI systems, a student AI, denoted as AIs, and a teacher AI,
demoted as AIt. These legacy AI systems process some input signals, pro-
duce internal representations of the input and return some outputs. We further
assume that some relevant information about the input, internal signals, and
9
Student AI Teacher AI
Internal representations of Student AI’s state
Labelling of internal representations
of Student AI’s state by Teacher AI 
Co
rr
ec
tio
ns
Figure 4: AI Knowledge transfer diagram. AIs produces a set of its state representations,
S. The representations are labelled by AIt into the set of correct responses, M, and the
set of errors, Y. The student system, AIs, is then augmented by an additional “corrector”
eliminating these errors.
outputs of AIs can be combined into a common object, x, representing, but not
necessarily defining, the state of AIs. The objects x are assumed to be elements
of Rn.
Over a period of activity system AIs generates a set S of objects x. Exact
composition of the set S could depend on a task at hand. For example, if AIs
is an image classifier, we may be interested only in a particular subset of AIs
input-output data related to images of a certain known class. Relevant inputs
and outputs of AIs corresponding to objects in S are then evaluated by the
teacher, AIt. If AIs outputs differ to that of AIt for the same input then an
error is registered in the system. Objects x ? S associated with errors are
combined into the set Y. The procedure gives rise to two disjoint sets:
M = S \ Y, M = {x1, . . . ,xM}
and
Y = {xM+1, . . . ,xM+k}.
A diagram schematically representing the process is shown in Fig. 4. The
knowledge transfer task is to “teach” AIs so that with
a) AIs does not make such errors
b) existing competencies of AIs on the set of inputs corresponding to internal
states x ?M are retained, and
c) knowledge transfer from AIt to AIs is reversible in the sense that AIs can
“unlearn” new knowledge by modifying just a fraction of its parameters,
if required.
Two algorithms for achieving such transfer knowledge are provided below.
10
3.2. Knowledge Transfer Algorithms
Our first algorithm, Algorithm 1, considers cases when Auxiliary Knowledge
Transfer Units, i.e. functional additions to existing student AIs, are single linear
functionals. The second algorithm, Algorithm 2, extends Auxiliary Knowledge
Transfer Units to two-layer cascades of linear functionals.
The algorithms comprise of two general stages, pre-processing stage and
knowledge transfer stage. The purpose of the pre-processing stage is to regular-
ize and “sphere” the data. This operation brings the setup close to the one con-
sidered in statements of Theorems 1, 2. The knowledge transfer stage constructs
Auxiliary Knowledge Transfer Units in a way that is very similar to the argument
presenteed in the proofs of Theorems 1 and 2. Indeed, if |Yw,i|  |Sw \ Yw,i|
then the term (Cov(Sw \ Yw,i) + Cov(Yw,i))?1 is close identity matrix, and the
functionals `i are good approximations of (8). In this setting, one might expect
that performance of the knowledge transfer stage would be also closely aligned
with the corresponding estimates (1), (7).
Remark 2. Note that the regularization step in the pre-processing stage en-
sures that the matrix Cov(Sw \ Yw,i) + Cov(Yw,i) is non-singular. Indeed, con-
sider
Cov(Sw \ Yw,i) = 1|Sw\Yw,i|
?
x?Sw\Yw,i(x? x?(Sw \ Yw,i))(x? x?(Sw \ Yw,i))
T
= 1|Sw\Yw,i|
(?
x?Sw\Yw(x? x?(Sw \ Yw,i))(x? x?(Sw \ Yw,i))
T +?
x?Yw\Yw,i(x? x?(Sw \ Yw,i))(x? x?(Sw \ Yw,i))
T
)
.
Denoting d = x?(Sw \ Yw,i)? x?(Sw \ Yw) and rearranging the sum below as?
x?Sw\Yw(x? x?(Sw \ Yw,i))(x? x?(Sw \ Yw,i))
T =?
x?Sw\Yw(x? x?(Sw \ Yw) + d)(x? x?(Sw \ Yw) + d)
T =?
x?Sw\Yw(x? x?(Sw \ Yw))(x? x?(Sw \ Yw))
T+
2d
?
x?Sw\Yw(x? x?(Sw \ Yw))
T + |x ? Sw \ Yw|ddT
=
?
x?Sw\Yw(x? x?(Sw \ Yw))(x? x?(Sw \ Yw))
T + |x ? Sw \ Yw|ddT
we obtain that Cov(Sw \Yw,i) is non-singular as long as the sum
?
x?Sw\Yw(x?
x?(Sw \ Yw))(x? x?(Sw \ Yw))T is non-singular. The latter property, however, is
guaranteed by the regularization step in Algorithm 1.
Remark 3. Clustering at Step 2.a can be achieved by classical k-means algo-
rithms [19] or any other method (see e.g. [20]) that would group elements of Yw
into clusters according to spatial proximity.
Remark 4. Auxiliary Knowledge Transfer Units in Step 2.b of Algorithm 1
are derived in accordance with standard Fisher linear discriminant formalism.
This, however, need not be the case, and other methods such as e.g. support
vector machines [21] could be employed for this purpose there. It is worth
mentioning, however, that support vector machines might be prone to overfitting
11
Algorithm 1 Single-functional AI Knowledge Transfer
1. Pre-processing
(a) Centering. For the given set S, determine the set average, x?(S), and
generate sets Sc
Sc = {x ? Rn |x = ? ? x?(S), ? ? S},
Yc = {x ? Rn |x = ? ? x?(S), ? ? Y}.
(b) Regularization. Determine covariance matrices Cov(Sc), Cov(Sc\Yc) of the
sets Sc and Sc \Yc. Let ?i(Cov(Sc)), ?i(Cov(Sc \Yc)) be their correspond-
ing eigenvalues, and h1, . . . , hn be the eigenvectors of Cov(Sc). If some of
?i(Cov(Sc)), ?i(Cov(Sc \Yc)) are zero or if the ratio maxi{?i(?(Sc))}mini{?i(?(Sc))} is too
large, project Sc and Yc onto appropriately chosen set of m < n eigenvec-
tors, hn?m+1, . . . , hn:
Sr = {x ? Rn |x = HT ?, ? ? Sc},
Yr = {x ? Rn |x = HT ?, ? ? Yc},
where H = (hn?m+1 · · ·hn) is the matrix comprising of m significant prin-
cipal components of Sc.
(c) Whitening. For the centered and regularized dataset Sr, derive its covari-
ance matrix, Cov(Sr), and generate whitened sets
Sw = {x ? Rm |x = Cov(Sr)?
1
2 ?, ? ? Sr},
Yw = {x ? Rm |x = Cov(Sr)?
1
2 ?, ? ? Yr},
2. Knowledge transfer
(a) Clustering. Pick p ? 1, p ? k, p ? N, and partition the set Yw into p
clusters Yw,1, . . .Yw,p so that elements of these clusters are, on average,
pairwise positively correlated. That is there are ?1 ? ?2 > 0 such that:
?2(|Yw,i| ? 1) ?
?
??Yw,i\{x}
??,x? ? ?1(|Yw,i| ? 1) for any x ? Yw,i
(b) Construction of Auxiliary Knowledge Units. For each cluster Yw,i, i =
1, . . . , p, construct separating linear functionals `i:
`i(x) =
?
wi
?wi?
,x
?
? ci,
wi = (Cov(Sw \ Yw,i) + Cov(Yw,i))?1 (x?(Yw,i)? x?(Sw \ Yw,i))
where x?(Yw,i), x?(Sw \Yw,i) are the averages of Yw,i and Sw \Yw,i, respec-
tively, and ci is chosen as ci = min??Yw,i
?
wi
?wi?
, ?
?
.
(c) Integration. Integrate Auxiliary Knowledge Units into decision-making
pathways of AIs. If, for an x generated by an input to AIs, any of `i(x) ? 0
then report x accordingly (swap labels, report as an error etc.)
12
[22] and their training often involves iterative procedures such as e.g. sequential
quadratic minimization [23].
Furthermore, instead of the sets Yw,i, Sw \ Yw,i one could use a somewhat
more aggressive division: Yw,i and Sw \ Yw, respectively.
Depending on configuration of samples S and Y, Algorithm 1 may occa-
sionally create knowledge transfer units, `i, that are “filtering” errors too ag-
gressively. That is some x ? Sw \ Yw may accidentally trigger non-negative
response, `i(x) ? 0, and as a result of this their corresponding inputs to As
could be ignored or mishandled. To mitigate this, one can increase the number
of clusters and knowledge transfer units, respectively. This will increase the
probability of successful separation and hence alleviate the issue. On the other
hand, if increasing the number of knowledge transfer units is not desirable for
some reason, then two-functional units could be a feasible remedy. Algorithm 2
presents a procedure for such an improved AI Knowledge Transfer.
Algorithm 2 Two-functional AI Knowledge Transfer
1. Pre-processing. Do as in Step 1 in Algorithm 1
2. Knowledge Transfer
(a) Clustering. Do as in Step 2.a in Algorithm 1
(b) Construction of Auxiliary Knowledge Units.
1: Do as in Step 2.b in Algorithm 1. At the end of this step first-stage
functionals `i, i = 1, . . . , p will be derived.
2: For each set Yw,i, i = 1, . . . , p, evaluate the functionals `i for all x ?
Sw \ Yw,i and identify elements x such that `i(x) ? 0 and x ? Sw \
Yw (incorrect error assignment). Let Ye,i be the set containing such
elements x.
3: If (there is an i ? {1, . . . , p} such that |Ye,i| + |Yw,i| > m) then
increment the value of p: p? p+ 1, and return to Step 2.a.
4: If (all sets Ye,i are empty) then proceed to Step 2.c.
5: For each pair of `i and Yw,i ?Ye,i with Ye,i not empty, project orthog-
onally sets Yw,i and Ye,i onto the hyperplane `i(x) = 0 and form the
sets Li(Yw,i) and Li(Ye,i) :
Li(Yw,i) =
{
x ? Rm | x =
(
Im ? wiw
T
i
?wi?2
)
? + ciwi?wi? , ? ? Yw,i
}
,
Li(Ye,i) =
{
x ? Rm | x =
(
Im ? wiw
T
i
?wi?2
)
? + ciwi?wi? , ? ? Ye,i
}
.
6: Construct a linear functional `2,i separating Li(Yw,i) from Li(Ye,i) so
that `2,i(x) ? 0 for all x ? Yw,i and `2,i(x) < 0 for all x ? Ye,i.
(c) Integration. Integrate Auxiliary Knowledge Units into decision-making
pathways of AIs. If, for an x generated by an input to AIs, any of the
predicates (`i(x) ? 0) ? (`2,i(x) ? 0) hold true then report x accordingly
(swap labels, report as an error etc.).
In what follows we illustrate the approach as well as the application of the
proposed Knowledge Transfer algorithms in a relevant problem of a computer
vision system design for pedestrian detection in live video streams.
13
4. Example
Let AIs and AIt be two systems developed, e.g. for the purposes of pedes-
trian detection in live video streams. Technological progress in embedded sys-
tems and availability of platforms such as e.g. Nvidia Jetson TX2 made hadr-
ware deployment of such AI systems at the edge of computer vision processing
pipelines feasible. These AI systems, however, lack computational power to run
state-of-the-art large scale object detection solutions such as e.g. ResNet [24]
in real-time. Here we demonstrate that to compensate for this lack of power,
AI Knowledge Transfer can be successfully employed. In particular, we sug-
gest that the edge-based system is “taught” by the state-of-the-art teacher in
a non-iterative and near-real time way. Since our building blocks are linear
functionals, such learning will not lead to significant computational overheads.
At the same time, as we will show later, the proposed AI Knowledge Transfer
will result in a major boost to the system’s performance in the conditions of the
experiment.
4.1. Definition of AIs and AIt and rationale
In our experiments, the teacher AI, AIt, was modeled by a deep Convo-
lutional Network, ResNet 18 [24] with circa 11M trainable parameters. The
network was trained on a “teacher” dataset comprised of 5.2M non-pedestrian
(negatives), and 600K pedestrian (positives) images. The student AI, AIs, was
modelled by a linear classifier with HOG features [25] and 2016 trainable pa-
rameters. The values of these parameters were the result of AIs training on
a “student” dataset, a sub-sample of the “teacher” dataset comprising of 55K
positives and 130K negatives, respectively. This choice of AIs and AIt systems
enabled us to emulate interaction between edge-based AIs and their more pow-
erful counterparts that could be deployed on larger servers or computational
clouds.
Moreover, to make the experiment more realistic, we assumed that internal
states of both systems are inaccessible for direct observation. To generate sets S
and Y required in Algorithms 1 and 2 we augmented system AIs with an external
generator of HOG features of the same dimension. We assumed, however, that
covariance matrices of positives and negatives from the “student” dataset are
available for the purposes of knowledge transfer. A diagram representing this
setup is shown in Figure 5. A candidate image is evaluated by two systems
simultaneously as well as by a HOG features generator. The latter generates
2016 dimensional vectors of HOGs and stores these vectors in the set S. If
outputs of AIs and AIt do not match the corresponding feature vector is added
to the set Y.
4.2. Error types
In this experiment we consider and address two types of errors: false positives
(Type I errors) and false negatives (Type II errors). The error types were
determined as follows. An error is deemed as false positive if AIs reported
presence of a correctly sized full-figure image of pedestrian in a given image
14
Figure 5: Knowledge transfer diagram between ResNet and HOG-SVM object detectors
patch whereas no such object was there. Similarly, an error is deemed as false
negative if a pedestrian was present in the given image patch but AIs did not
report it there.
In our setting, evaluation of an image patch by AIt (ResNet) took 0.01 sec
on Nvidia K80 which was several orders slower than that of AIs (linear HOG-
based classifier). Whilst such behavior was expected, this imposed technical
limitations on the process of mitigating errors of Type II. Each frame from our
testing video produced 400K image patches to test. Evaluation of all these
candidates by our chosen AIt is prohibitive computationally. To overcome this
technical difficulty we tested only a limited subset of image proposals with
regards to these error type. To get a computationally viable number of proposals
for false negative testing, we increased sensitivity of the HOG-based classifier by
lowering its detection threshold from 0 to ?0.3. This way our linear classifier
with lowered threshold acted as a filter letting through more true positives
at the expense of large number of false positives. In this operational mode,
Knowledge Transfer Unit were tasked to separate true positives from negatives
in accordance with object labels supplied by AIt.
4.3. Datasets
The approach was tested on two benchmark videos: LINTHESCHER se-
quence [26] created by ETHZ and comprised of 1208 frames and NOTTING-
HAM video [27] containing 435 frames of live footage taken with an action cam-
era. In what follows we will refer to these videos as ETHZ and NOTTINGHAM
15
0 100 200 300 400 500 600 700
False Positives
0
500
1000
1500
2000
2500
3000
3500
4000
T
ru
e 
P
os
iti
ve
s
Figure 6: True positives as a function of false positives for NOTTINGHAM video.
videos, respectively. ETHZ video contains complete images of 8435 pedestrians,
whereas NOTTINGHAM video has 4039 full-figure images of pedestrians.
4.4. Results
Performance and application of Algorithms 1, 2 for NOTTINGHAM and
ETHZ videos are summarized in Fig. 6 and 7. Each curves in these figures is
produced by varying the values of decision-making threshold in the HOG-based
linear classifier. Red circles in Figure 6 show true positives as a function of false
positives for the original linear classifier based on HOG features. Parameters of
the classifier were set in accordance with Fisher linear discriminant formulae.
Blue stars correspond to AIs after Algorithm 1 was applied to mitigate errors
of Type I in the system. The value of p (number of clusters) in the algorithm
was set to be equal to 5. Green triangles illustrate application of Algorithm 2
for the same error type. Here Algorithm 2 was slightly modified so that the
resulting Knowledge Transfer Unit had only one functional `2. This was due
to the low number of errors reaching stage two of the algorithm. Black squares
correspond to AIs after application of Algorithm 2 (error Type I) followed by
application of Algorithm 2 to mitigate errors of Type II.
Figure 7 shows performance of the algorithms for ETHZ sequence. Red cir-
cles show performance of the original AIs, green triangles correspond to AIs
supplemented with Knowledge Transfer Units derived using Algorithm 2 for er-
rors of Type I. Black squares correspond to subsequent application of Algorithm
2 dealing with errors of Type II.
In all these cases, supplementing AIs with Knowledge Transfer Units con-
structed with the help of Algorithms 1, 2 for both error types resulted in sig-
nificant boost to AIs performance. Observe that in both cases application of
16
0 50 100 150 200
False Positives
0
1000
2000
3000
4000
5000
6000
7000
8000
T
ru
e 
P
os
iti
ve
s
Figure 7: True positives as a function of false positives for ETHZ video.
Algorithm 2 to address errors of Type II has led to noticeable increases of num-
bers of false positives in the system at the beginning of the curves. Manual
inspection of these false positives revealed that these errors are exclusively due
mistakes of AIt itself. For the sake of illustration, these errors for NOTTING-
HAM video are shown in Fig. 8. These errors contain genuine false positives
(images 12, 23-27) as well as mismatches by size (e.g. 1-7), and look-alikes
(images 8,11,13,15-17).
5. Conclusion
In this work we proposed a framework for instantaneous knowledge trans-
fer between AI systems whose internal state used for decision-making can be
described by elements of a high-dimensional vector space. The framework en-
ables development of non-iterative algorithms for knowledge spreading between
legacy AI systems with heterogeneous non-identical architectures and varying
computing capabilities. Feasibility of the framework was illustrated with an ex-
ample of knowledge transfer between two AI systems for automated pedestrian
detection in video streams.
In the basis of the proposed knowledge transfer framework are separation
theorems (Theorem 1 – 3) stating peculiar properties of large but finite random
samples in high dimension. According to these results, k < n random i.i.d. ele-
ments can be separated form M  n randomly selected elements i.i.d. sampled
from the same distribution by few linear functionals, with high probability. The
theorems are proved for equidistributions in a ball and in a cube. The results
can be trivially generalized to equidistributions in ellipsoids and Gaussian dis-
tributions. Generalizations to other meaningful distributions is the subject of
our future work.
17
Figure 8: False Positives induced by the teacher AI, AIt.
18
Acknowledgments
The work was supported by Innovate UK Technology Strategy Board (Knowl-
edge Transfer Partnership grants KTP009890 and KTP010522).
References
[1] S. Gilev, A. Gorban, E. Mirkes, Small experts and internal conflicts in learn-
ing neural networks (malye eksperty i vnutrennie konflikty v obuchaemykh
neironnykh setiakh), Akademiia Nauk SSSR, Doklady 320 (1) (1991) 220–
223.
[2] R. Jacobs, M. Jordan, S. Nowlan, G. Hinton, Adaptive mixtures of local
experts, Neural Computation 3 (1) (1991) 79–87.
[3] L. Pratt, Discriminability-based transfer between neural networks, Ad-
vances in Neural Information Processing (5) (1992) 204–211.
[4] T. Schultz, F. Rivest, Knowledge-based cascade correllation, in: Proceed-
ings of the IEEE-INNS-ENNS International Joint Conference on Neural
Networks, IEEE, 2000, pp. 641–646.
[5] J. Yosinski, J. Clune, Y. Bengio, H. Lipson, How transferable are features
in deep neural networks?, in: Advances in neural information processing
systems, 2014, pp. 3320–3328.
[6] T. Chen, I. Goodfellow, J. Shlens, Net2net: Accelerating learning via
knowledge transfer, ICLR 2016.
[7] C. Bucila, R. Caruana, A. Niculescu-Mizil, Model compression, in: KDD,
ACM, 2006, pp. 535–541. doi:10.1145/1150402.1150464.
[8] G. Hinton, O. Vinyals, J. Dean, Distilling the knowledge in a neural net-
work, cite arxiv:1503.02531Comment: NIPS 2014 Deep Learning Workshop
(2015).
URL http://arxiv.org/abs/1503.02531
[9] V. Vapnik, R. Izmailov, Knowledge transfer in svm and neural networks,
Annals of Mathematics and Artificial Intelligence (2017) 1–17.
[10] F. N. Iandola, S. Han, M. W. Moskewicz, K. Ashraf, W. J. Dally,
K. Keutzer, Squeezenet: Alexnet-level accuracy with 50x fewer parame-
ters and < 0.5mb model size, arXiv preprint, arXiv:1602.07360.
[11] M. Gromov, Metric Structures for Riemannian and non-Riemannian
Spaces. With appendices by M. Katz, P. Pansu, S. Semmes. Translated
from the French by Sean Muchael Bates, Birkhauser, Boston, MA, 1999.
[12] M. Gromov, Isoperimetry of waists and concentration of maps, GAFA,
Geomteric and Functional Analysis 13 (2003) 178–215.
19
[13] J. Gibbs, Elementary Principles in Statistical Mechanics, developed with
especial reference to the rational foundation of thermodynamics, Dover
Publications, New York, 1960 [1902].
[14] P. Le?vy, Proble?mes concrets d’analyse fonctionnelle, 2nd Edition, Gauthier-
Villars, Paris, 1951.
[15] A. Gorban, Order-disorder separation: Geometric revision, Physica A 374
(2007) 85–102.
[16] A. Gorban, I. Tyukin, Stochastic separation theorems, Neural Networks 94
(2017) 255–259.
[17] A. Gorban, I. Tyukin, D. Prokhorov, K. Sofeikov, Approximation with
random bases: Pro et contra, Information Sciences 364–365 (2016) 129–
145.
[18] A. Gorban, R. Burton, I. Romanenko, T. I., One-trial correction of legacy
ai systems and stochastic separation theorems (11 2016).
URL https://arxiv.org/abs/1610.00494
[19] S. P. Lloyd, Least squares quantization in pcm, IEEE Transactions on
Information Theory 28 (2) (1982) 129–137.
[20] R. Duda, P. Hart, D. Stork, Pattern Classification, Wiley, 2000.
[21] V. Vapnik, The Nature of Statistical Learning Theory, Springer-Verlag,
2000.
[22] H. Han, Analyzing support vector machine overfitting on microarray data,
in: D. Huang, K. Han, M. Gromiha (Eds.), Intelligent Computing in
Bioinformatics. ICIC 2014. Lecture Notes in Computer Science, Vol. 8590,
Springer, Cham, 2014, pp. 148–156.
[23] J. Platt, Sequential minimal optimization: A fast algorithm for training
support vector machines, in: B. Scho?lkopf, C. Burges, A. Smola (Eds.),
Advances in Kernel Methods – Support Vector Learning, MIT Press, Cam-
bridge, 1998.
[24] K. He, X. Zhang, S. Ren, J. Sun, Deep residual learning for image recogni-
tion, in: 2016 IEEE Conference on Computer Vision and Pattern Recogni-
tion, 2016, pp. 770–778.
[25] N. Dalal, B. Triggs, Histograms of oriented gradients for human detection,
in: Proc. of the IEEE Conference on Computer Vision and Pattern Recog-
nition, 2005, pp. 886–893.
[26] A. Ess, B. Leibe, K. Schindler, L. van Gool, A mobile vision sys-
tem for robust multi-person tracking, in: Proc. of the IEEE Confer-
ence on Computer Vision and Pattern Recognition, 2008, pp. 1–8, DOI:
10.1109/CVPR.2008.4587581.
20
[27] R. Burton, Nottingham video, a test video for pedestrians detection taken
from the streets of Nottingham by an action camera (2016).
URL https://youtu.be/SJbhOJQCSuQ
21
