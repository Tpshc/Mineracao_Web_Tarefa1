ar
X
iv
:1
70
8.
09
67
9v
1 
 [
cs
.I
T
] 
 3
1 
A
ug
 2
01
7
1
An Incremental Redundancy HARQ Scheme for
Polar Code
Liang Ma?, Jie Xiong?, Yuejun Wei? and Ming Jiang†
?Huawei Technology CO., LTD
Shanghai Institution,Shanghai, China 201206
Email: {maliang9,liuxiaojian5,pico.xiong,zhengchen1,weiyuejun}@huawei.com
†SouthEast University
No.9, Mozhoudong Road, Jiangning District, Nanjing, China 211111
Email: Jiang ming@seu.edu.cn
Abstract—A polar code extension method which supports
incremental redundancy hybrid ARQ(IR-HARQ) is proposed in
this paper. By copying information bits to proper positions of
the extend part, the extended polar code can give additional
protection for the bits weakly protected by the first transmission.
A comparison between the proposed algorithm with directly
generated polar code, LTE turbo code, and some other IR-HARQ
supporting polar code is given. Simulation results show that the
proposed algorithm has nearly the same performance as directly
generated polar code, which is chosen as base line for comparison.
Index terms— Polar code; IR-HARQ; rate compatible
I. INTRODUCTION
Polar code, proposed by Arikan [1] [2], is the first class of
channel code which is proven that can achieve the symmetric
capacity of a binary-input discrete memoryless channel for
an infinite code length under successive cancellation (SC)
decoding. Later, successive cancellation list (SCL) [3] and suc-
cessive cancellation stack (SCS) [4] decoders are introduced to
improve the performance for a finite-length code. With CRC
aided, polar code using SCL decoder outperforms previous
channel codes such as turbo code or LDPC code. Polar code
shows great potential for communication system in the future,
and was chosen for 5G control channel recently.
Wireless system operates in time-varying channels, so it
requires flexible and adaptive transmission techniques. Hybrid
ARQ transmission schemes which combine the conventional
ARQ with forward error correction code are very useful for
scenarios where the quality of the communication channel is
unknown. Incremental redundancy hybrid ARQ (IR-HARQ)
achieves better performance, so it has been adopted by a
number of standards for mobile phone networks. It usually
operates as follows. The user data bits are firstly encoded by
a low rate code, referred to as the mother code. Then, only a
part of mother code is sent and the receiver tries to decode by
these selected bits. If the decoding attempt fails, additional bits
will be sent. The receiver combine the bits retransmitted with
those bits previously received, and decode them as a relatively
lower rate code. This procedure is repeated until successfully
decoding or all of the mother code is sent [5].
However, it is hard for polar code to design an IR-HARQ
strategy by the scheme above. Due to the highly structured
nature of polar code, a puncture method which can maintain a
capacity-achieving performance of its punctured code is still
not found. Nor is it clear how to incrementally add coding
bits to a high rate polar code and make sure the final low rate
code is capacity-achieving. In [6]- [10], kinds of information
set optimizing methods based on different puncture pattern
were proposed, but these methods cannot be used for IR-
HARQ for which the information sets should not be changed
after puncturing. In [11] [12], puncture sets were searched
step by step using a greedy search algorithm which can make
sure that the puncture pattern were good for current step, but
the overall puncture pattern was not optimal. In [13] [14],
a scheme called incremental freezing was proposed. By this
scheme, a high rate polar code was sent first. If the decoding
failed, the information bits sent on less reliable channels are
re-encoded and sent by a low rate polar code. After the low
rate code decoded, these bits were copied back to the previous
code which made its rate to be lower. By this scheme, a part of
coding gain can be got but not all, since retransmitted code has
to be decoded separately before combining,. For IR-HARQ,
like LTE turbo code, only combining soft information before
decoding can be capacity-achieving.
Our purpose is to design an IR-HARQ scheme for polar
code like LTE turbo or Raptor-like LDPC, which means, no
matter how many bits to be decoded, receiver should decode
them as an integrated low code rate code word. The combining
code words should performance as good as the codes generated
directly with the same code rate. In this paper, we will show
how our proposed scheme can do this.
The rest of the paper is organized as follows. In Section
II, we present some background knowledge of polar codes. In
Section III, we present our algorithm for polar code IR-HARQ
which can get full part of coding gain. Section IV presents
the simulation results for different IR-HARQ scheme. It also
compares the performance of proposed scheme with LTE turbo
code. Conclusion and topics for future research are provided
in Section V
2
II. BACKGROUND
A. Polar code
A polar Code is a linear block constructed recursively from
many basic polarization units F, where F =
[
1 0
1 1
]
. For a
code with length N = 2n, the generator matrix GN = F
?n
and ? denotes the Kronecker product.
In [1], it was proved that the recursively structure brought
a kind of phenomenon called channel polarization. For a
general polarization unit (W
(i)
N ,W
(i)
N ) ? (W
(2i?1)
2N ,W
(2i)
2N ),
n ? 0, N = 2n, 1 ? i ? N , while N denote the length and i
denote the index of information bits to be encoded.
It can be proved that when N independent channels goes
through the butterfly patterns, some of them become more re-
liable and others become unreliable. For any B-DMC channel,
as N goes to infinity through powers of two, the capacity for
part of the channels goes to 1 and others goes to 0. The main
idea of polar code is send data only through those channels
whose capacity is near 1, and send frozen bits (known bits for
sender and receiver) through those channels whose capacity
is near 0. Details of these symbols mentioned above can be
found in [1].
B. Channel capacity caculate
Encode of polar code is very easy to be described by
the butterfly figure. Firstly, the capacity of each bit has to
be calculated. For B-DMC channel, Arikan gives a way to
computed it by recursive relations:
I(W
(2i?1)
N ) = I(W
(i)
N/2)
2 (1)
I(W
(2i)
N ) = 2I(W
(i)
N/2)? I(W
(i)
N/2)
2 (2)
For AWGN channel, Gaussian approximation is used to
estimate channel capacity easily [15] [16]. Assume the input
signal a
(i)
N is a Gaussian distribution. The mean value and
variance (m
(2i?1)
2N , 2m
(2i?1)
2N ) and (m
(2i)
2N , 2m
(2i)
2N ) of output
signal a
(2i?1)
2N and a
(2i)
2N equal to:
m
(2i?1)
2N = ?
?1(1? [1? ?(m
(i)
N )]
2) (3)
m
(2i)
2N = 2m
(i)
N (4)
Function ?():
?(x) =
{ ?
?
x (1?
10
7x ) exp(?
x
4 )
exp(?0.4527x?0.86 + 0.0218)
(x ? 10)
(0 < x < 10)
(5)
Assume the information sequence is denoted as u? =
{u0, u1, . . . , uN}. Through recursively applying (3) and (4),
I(W
(i)
N ) for each bit ui can be calculated. Then, set the bits
with least channel capacity to be zero, and let the other k bits
to be variable. Codewords x? can be calculated as
x? = u?GN (6)
GN denotes the generator matrix for polar code.
0.8999
0.4673
0.3462
0.0366
0.2275
0.0147
0.0078
0.00011
2
3
4
5
6
7
8 0.25
0.25
0.25
0.25
0.25
0.25
0.25
0.25
0.0625
0.0625
0.0625
0.0625
0.4375
0.4375
0.4375
0.43750.6836
0.6836
0.1914
0.1914
0.1211
0.1211
0.0039
0.0039
Fig. 1: An Example for a (8, 6) polar code
III. IR-HARQ FOR POLAR CODE
A. Illustration of proposed algorithm
For LTE turbo code, puncture is an easy method to achieve
rate compatible. However, puncture is not a good way for polar
code, because it will break the uniform structure of polar units
and the channel polarization distribution will change after that.
Another way to achieve rate compatible is extending, since
Raptor-like LDPC used this method to construct a low rate
code from high rate code. The problem for extending polar
code is: how to make sure the information bits are still sent
by the good channels after extending?
For easy understanding, we will give an example to illustrate
the main idea of proposed algorithm. As Fig.1 shows, we
send a (8, 6) polar code at first. The channel is a BEC with
erasure probability p=0.25, and the channel capacity for each
bits can be calculated by (1) and (2). We write these erasure
probabilities on the figure. If we want to set 6 variable bits
and 2 frozen bits from bit No. 1 to bit No. 8, bit No. 7 and bit
No. 8 should be set to be frozen bits for they have a higher
erasure probability than others. Define ”capacity sequence”
to be the bit sequence ordered by its channel capacity from
higher to lower (For BEC, it should be the erasure probability
from lower to higher). a1, a2, · · · , an denote the bits before
encoding and b1, b2, · · · , bn denote the bits after encoding.
The capacity sequence for the (8, 6) polar code should be
a1, a2, a3, a5, a4, a6, a7, a8.
Assuming channel erasure probability p=0.5 now and the (8,
6) polar code was decoded unsuccessfully. For IR-HARQ, the
(8, 6) polar code need to be extended to a (16, 6) polar code,
so the code can work for lower SNR. As Fig.?? shows, the
original (8, 6) polar code is extended to a (16, 6) polar code
by recursively add 8 new bits to the original code. Now the
problem is, the value for bits a1 to a8 and b1 to b8 cannot be
changed, but some of the information bits were not set on the
good position for a (16, 6) polar code. To solve the problem,
first we recalculate the erasure probabilities for the (16, 6)
polar code. Then, we check the erasure probability from a9 to
a16. It is found that if we include the extension part, a9 got
a lower erasure probability than a6 and a4 which were set to
be information bits for the first transmission. That means, it
is better to send bit by a9 rather than a6 or a4. Since a6 has
a higher erasure probability than a4, we copy the value of a6
3
1.0000
0.9922
0.9853
0.7725
0.9634
0.6538
0.5327
0.1001
0.8999
0.4673
0.3462
0.0366
0.2275
0.0147
0.0078
0.00011
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16 Frozen bit
Information bit
Copy bits pair
First transmit
Second transmit
Second
transmission
First
transmission
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.5
0.25
0.25
0.25
0.25
0.25
0.25
0.25
0.25
0.75
0.75
0.75
0.75
0.75
0.75
0.75
0.75
0.0625
0.0625
0.0625
0.0625
0.4375
0.4375
0.4375
0.4375
0.5625
0.6836
0.6836
0.1914
0.1914
0.1211
0.1211
0.0039
0.0039
0.5625
0.5625
0.5625
0.9375
0.9375
0.9375
0.9375
0.3164
0.3164
0.8086
0.8086
0.8789
0.8789
0.9961
0.9961
Fig. 2: An Extenting Example from a (8, 6) polar code to a (16, 6) polar code
to a9 and set a9 to be an information bit for the (16, 6) polar
code. The other bits from a10 to a16 has a higher erasure
probability than the information bits for the first transmission,
so we set them to be frozen bits.
After the extending, we got two part of polar code. As Fig.2
shows that, one part for the first transmission and the other part
for the second transmission. When retransmission occurs, the
extension part should be combined with the first transmitted
part and decoded as a (16, 6) polar code. When the decoding
progress goes to a9, it is treated as an information bit. Then,
when the decoding progress goes to a6, since it contains the
same information as a9, a6 is decoded as a frozen bit and use
the value of a9 to choose its path (0 or 1).
Here, we define the bits pair like a6 and a9 as ”copy bits
pair”. For polar IR-HARQ, we need to find these ”copy bits
pair” when extent a N length polar code into a 2N length polar
code. Here, we will describe our method in AWGN channel
which is similar to the example shows above. ai denotes the
bits before polar encoding and bi denotes the bits after polar
encoding. CN,ai donates the channel capacity for ai calculated
by N length polar code. C2N,ai donates the channel capacity
for ai calculated by 2N length polar code.
Step 1, we use Gaussian approximation to calculate capacity
sequence for the N length polar code as
aN = {ai0 , ai1 , · · · , aiN?1}, 0 < ik ? N
If total number of information bits are k, top k bits in aN
sequence are set as information bits.
Step 2, we calculate the capacity sequence for the 2N length
polar code. The capacity sequence of the bits belonging to the
first transmission part is
a2N = {ap0 , ap1 , · · · , apN?1}, 0 < pk ? N
The capacity sequence of the the bits belonging to the
retransmission part is
r2N = {rq0 , rq1 , · · · , rqN?1}, N + 1 < qk ? 2N
C2N,ai and C2N,rq donates the channel capacity for ai and
rq calculated by 2N length polar code.
Step 3, search a2N and r2N . Find the smallest C2N,ai ,
whose corresponding ai belongs to an information bit for the
first transmission. Then, find the smallest C2N,rq which is
bigger than C2N,ai . Set ai and rq as a copy bits pair and
remove ai and rq from a2N and r2N .
Step 4, repeat step 3, until no C2N,rq in r2N satisfies the
criterion in step 3.
By the four steps, all copy bits pair are found. For each copy
bits pair, one bit locates in the first transmission part, and the
other bit locates in the retransmission part. We copy the value
of the bits in the first transmission part to its corresponding
partner. For the first transmission, the bit of a pair in the first
transmission part can be decoded as an information bit. For the
retransmission, the bit of a pair in the retransmission should
be decoded as an information bit, while its partner can be
decoded as a frozen bit and using former decoded result for
choosing path(0 or 1).
We give the operation in a pseudo code form.
Set code length to N
for i in N do
Calculate the channel capacity for the i-th bit as CN,ai
end for
Set code length to 2N
for i in 2N do
4
First
transmission
Second
transmisson
Third transmission copy
copy
Frozen bit
Information bit
Copy bits pair
2N N N
Fig. 3: IR-HARQ for duplicate retransmissions
if i ? N then
Calculate the channel capacity for the i-th bit as C2N,ai
else
Calculate the channel capacity for the i-th bit as C2N,ri
end if
end for
for all C2N,ai in increasing order do
if ai is an information bit for 1st transmission then
for all C2N,rj do
if exist C2N,rj , C2N,rj > C2N,ai then
Find smallest C2N,rk , C2N,rk > C2N,ai
Set C2N,rk and C2N,ai as a copy pair
else
Break
end if
end for
end if
end for
B. Method for multiple retransmission
Part A has illustrated the main idea for one time retransmis-
sion, and in this part the method for multiple retransmission
will be given. Fig.3 is an example of the proposed IR-HARQ
scheme. Assume there is a polar code IR-HARQ system which
sends a (N, k) polar code at the first transmission and the
system send N and 2N redundant bits at the second and the
third time. (If there are more repeat requests, the retransmitted
bits grow according to N multiply power of 2 like 4N, 8N,
16N,...)
Assume we have an N length polar code, and the code is
extended to a 2N length polar code for 2nd transmission. If
the 3rd transmission are needed, we can construct a 4N polar
as the method shown in part A. First, the information bits
for the 2N polar should be found. For the bits belonging to
information bits for the first transmission and not belonging
to a copy bits pair, the bits are treated as information bits. For
the bits belonging to a copy bits pair and not belonging to the
first transmission part, the bits are treated as information bits.
The other bits belonging to the the 2N polar code are treated
as frozen bits.
After all information bits for the 2N polar code are found,
we can use similar method as section A to find all copy bits
0.5 1 1.5 2 2.5 3 3.5 4 4.5 5 5.5
10
?4
10
?3
10
?2
10
?1
10
0
Polar SC decoder @ AWGN, QPSK, NoCRC, K=1536
EbN0(dB)
B
L
E
R
 
 
Arikan(2048,1536)
Arikan(4096,1536)
Proposed(4096,1536)
IF(4096,1536)
Fig. 4: Performance of proposed algorithm with k=1536
pair for 4N polar code. For each pair, duplicate the value of
the bits belonging to the 2N polar code to its partner. The 4N
polar code can be got.
Decoding scheme is also similar as section A. For each
copy bit pair, both bits contain the same value. When decode
sequence goes to a copy bit pair, check the value of its partner.
If its partner is not been decoded yet, the bit is treated as an
information bit. If its partner is already decoded, the bit is
handled as a frozen and uses its partner’s value to choose
path.
IV. SIMULATION RESULTS
In this section we present Monte-Carlo simulation results to
evaluate the performance of different IR-HARQ schemes. We
also give a comparison between proposed scheme and LTE
turbo code.
We assume code is transmitted on AWGN channel by
QPSK and decoded by SC decoding. The capacity sequence
is calculated by Gaussian approximation. The estimate SNR
is set to 4 dB for the first transmission and 1 dB for the
second transmission. Fig.4 shows the block error rate (BLER)
performance of polar codes when k=1536. For comparison,
simulation curve of incremental freezing (IF) and directly
generated Arikan polar code is given at the same time.
Compared with directly generated polar code when k=1536,
the proposed algorithm performs as well as it, while the
incremental freezing algorithm is 1.1 dB worse.
Fig.5 shows the bit error rate (BER) performance of polar
code when k=88. The greedy puncture (GP) algorithm is added
for comparison. In this case, proposed method performs nearly
the same with directly generated Arikan polar code, while
incremental freezing method is 0.6 dB worse. The performance
for greedy puncture deteriorates with the increase of puncture
bits. When the rate goes up to 0.685 which nearly equal to
(88, 256) polar code, the performance of greedy puncture is
2.3 dB worse than directly generated Arikan polar code.
5
0 1 2 3 4 5 6 7 8 9
10
?6
10
?5
10
?4
10
?3
10
?2
10
?1
10
0
Polar SC decoder @ AWGN, QPSK, NoCRC, K=88
EbN0(dB)
B
E
R
 
 
Arikan(128,88)
Arikan(256,88)
Proposed(256,88)
IF(256,88)
GP(0.5)
GP(0.6)
GP(0.7)
GP(estimated,(128,88))
Fig. 5: The BER comparision between different HARQ algo-
rithm with k=88
1 2 3 4 5 6 7 8 9
10
?4
10
?3
10
?2
10
?1
10
0
Proposed HARQ compared with LTE Turbo@AWGN, QPSK, 
24bitCRC, iterations=8, K=112
EbN0(dB)
B
L
E
R
 
 
SCL(128,112)
SCL(256,112)
SC(128,112)
SC(256,112)
Turbo(128,112)
Turbo(256,112)
Fig. 6: Comparision between proposed algorithm and LTE
Turbo code
Fig.6 shows a BLER performance comparison between the
proposed method with LTE turbo code. A Max-Log-Map
algorithm is applied in turbo decoding and the iteration times
equal to 8. The result shows that polar code decoded by SCL
algorithm outperforms LTE turbo before and after the retrans-
mission. Polar code decoded by SC algorithm outperforms
LTE turbo code before retransmission but performs worse
than LTE turbo code after retransmission. This simulation
result shows that by proposed algorithm, polar code using SC
decoding algorithm can performs as well as turbo code in a
system need IR-HARQ. If SCL decoding algorithm is used,
polar code even has a better performance than turbo code.
However, there are still some disadvantages of polar code
?2 0 2 4 6 8 10
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
2
Throughput for different HARQ schemes@AWGN, QPSK, 
24bitCRC, K=192
SNR(dB)
N
o
rm
a
liz
e
d
 T
h
ro
u
g
h
p
u
t 
(b
it
s
)
 
 
Turbo
1
Turbo
2
SCL
1
SCL
2
 by IF
SCL
2
 by proposed
Fig. 7: Throughput for different HARQ schemes (k=192)
for IR-HARQ, since the proposed algorithm requires the length
of retransmitting blocks grows according to multiples of 2.
Compared with turbo code, it is inconvenient for polar to do
a flexible rate compatible IR-HARQ. If the length for each
transmitting blocks can be fix to N, we can use the idea of
incremental freezing to solve this problem. We decode the
retransmitting block first and combine the decoded soft value
with its corresponding copy bits. When the total transmitted
blocks satisfy N · 2k and k is an integer, retransmitted blocks
will be combined with previous blocks and decoded as a
complete low rate polar code. By this solution, full of coding
gain will be got when blocks are combined and for other
cases, there will be a performance loss. Fortunately, in a real
wireless communication system, the average retransmitting
time is very close to 1, so for most cases the gain from one
time retransmission is enough for decoding successfully. Only
one block which has a same length as pervious block is needed
for retransmitting that is very suitable for our algorithm.
Normalized throughput is defined as:
? = R · log2(M) · (1?BLER)/t? (7)
t? represents the average number of transmissions required
for successful decoding at the tested SNR. Assume max
transmitting time equals to 2, Fig.7 illustrates the normalized
throughput with IF and proposed schemes for polar code com-
pared with LTE turbo code. Here, method for IF mentioned in
[14] is used for a easier realizing. In Fig.7, when k equals to
192 and retransmission is not used, polar code performs nearly
1 dB better than LTE turbo code. When max transmission
equals to 2, it is observed that the proposed HARQ scheme
provides nearly 0.7 dB gain over LTE turbo code.
V. CONCLUSION
In this paper, we introduce an IR-HARQ scheme for polar
code. To improve the performance for retransmission, the pro-
posed algorithm extend original code into a longer polar code
6
like Raptor-like LDPC. The main idea of proposed algorithm
is to find copy bits pairs and make the pairs contain same
information. By this way, both original code and extended
code are constructed based on calculated channel capacity
which ensure the performance for both first transmission and
retransmission. Simulation results show that the extended code
constructed by our scheme has nearly the same performance
as a directly generated polar code.
For future work, increasing the flexibility of the scheme
should be focused on. For now, if the length of first transmis-
sion is N, the length of the retransmissions has to be a multiple
of N, while it is almost no limit for LTE turbo code. And only
when the total length of transmitted blocks satisfying N · 2k
and k is an integer, the codes will be combined together and
decoded as a low rate polar code. If the communication system
needs multiple retransmission, the proposed algorithm need to
be improved.
REFERENCES
[1] E. Arikan, “Channel polarization: A method for constructing capacity
achieving codes for symmetric binary-input memoryless channels“, IEEE
Trans. Inf. Theory, Vol. 55, No. 7, pp. 3051-3073, July 2009
[2] E. Arikan and E. Telatar, “On the rate of channel polarization“, IEEE Int.
Symp. Inform. Theory (ISIT), July 2009, Seoul, South Korea.
[3] I. Tal and A. Vardy, “List decoding of polar codes“, IEEE Int. Symp.
Inform. Theory (ISIT), pp. 1-5, 2011
[4] K. Niu and K. Chen, “Stack decoding of polar codes“, Electronics Letters,
Vol. 48, No. 12, 2012, 48(12): 695-697
[5] Andriyanova I, Soljanin E, “IR-HARQ schemes with finite-length punc-
tured LDPC codes over the BEC“, Information Theory Workshop, 2009.
ITW 2009. IEEE. IEEE, 2009: 125-129.
[6] K. Niu, K. Chen, and J. Lin, “Beyond turbo codes: Rate-compatible
punctured polar codes“, in Proc. IEEE ICC, Budapest, Hungary, Jun.
2013, pp. 3423-3427
[7] K. Chen, K. Niu, and J. Lin, “A hybrid ARQ scheme based on polar
codes“, IEEE Communication Letters, vol. 17, pp. 1996-1999, 2013
[8] R. Wang and R. Liu, “A novel puncturing scheme for polar codes“, IEEE
Commun, Letters, vol. 18, pp. 2081-2084, Dec. 2014
[9] Shin D M, Lim S C, Yang K, “Design of length-compatible polar codes
based on the reduction of polarizing matrices“, Communications, IEEE
Transactions on, 2013, 61(7): 2593-2599.
[10] V. Miloslavskaya, “Shortened polar codes“, IEEE Trans. Inf. Theory,
vol. 61, pp. 4852-4865, Sep. 2015
[11] Saber H, Marsland I, “An Incremental Redundancy Hybrid ARQ Scheme
via Puncturing and Extending of Polar Codes“, Communications, IEEE
Transactions on, 2015, 63(11): 3964-3973.
[12] El-Khamy M, Lin H P, Lee J, et al, “Rate-Compatible Polar Codes for
Wireless Channels“, arXiv preprint arXiv:1508.07698, 2015.
[13] Li B, Tse D, Chen K, et al, “Capacity-achieving rateless polar codes“,
arXiv preprint arXiv:1508.03112, 2015.
[14] Hong S N, Hui D, Maric I, “Capacity-Achieving Rate-Compatible Polar
Codes“, arXiv preprint arXiv:1510.01776, 2015.
[15] Mori R., Tanaka T., “Performance of polar codes with the construction
using density evolution“, IEEE Communications Letters, 13(7), 2009:
519-521
[16] Chung S. Y., Richardson T. J., and Urbanke R. L., “Analysis of sum
product decoding of low density parity-check codes using a Gaussian
approximation“, IEEE Transactions on Information Theory, IT-47, 2001:
657-670
